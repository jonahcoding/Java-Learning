一、JavaScript：
	1.1	脚本语言，无需编译即可运行。
	1.2	分类：
		1.Native原生JS开发。（ECMAScript，ES标准）
		2.TypeScript（微软开发，JavaScript超集）

	UI框架：
	- Ant-Design：阿里出品，基于React的UI框架
	- ElementUI. iview、ice：饿了么出品，基于Vue的UI框架
	- BootStrap：Twitter推出的一个用于前端开发的开源工具包
	- AmazeUI：一款HTML5跨屏的前端框架

	1.3	JavaScript 构建工具：
	- Babel：JS编译工具，主要用于浏览器不支持的ES新特性
	- WebPack：模块打包器，主要作用是打包、压缩、合并和按序加载

	1.4	引入
		1.内部引入
			<script>
				alert('hello world');
			</script>	
		2.外部引入
			<script src="js/qj.js"></script>
		
二、基本语法
	页面弹窗显示：alert("70~80");
	打印：console.log(score);
	定义变量：var score=70;
	
	数值：
		js不区分小数跟整数，统一用number。
		NaN		//not a number
		Infinity	//表示无限大
		缺陷：NaN===NaN（判断非数值型，永远为false），使用isNaN(NaN)代替。
			
	比较运算符：	
		=		//赋值
		==		//等于（类型不一样，值一样，也会判断为true）
		===	 	//绝对等于（类型一样，值一样，结果为true）

	左移右移运算符：
		>>>：无符号右移。
	
	浮点数：
		console.log((1/3)===(1-2/3));
		//输出 false
		//浮点数存在精度问题，避免使用。
	
	null和undefined:
		null：空
		undefined：未定义（常量）。
	
	注：
		alert("12"-1);//11
		alert("12"+1);//121
		alert(true+1);//2 ，false为0或null；true非0、非null，默认用1表示。
		alert("a="+a/1000*1000);//输出a，除运算不会进行取整
	
	数组：
		可存放多个数据类型。
		var arr = [1, 2, 3, 4, 5, "hello", null, true];
	
	对象：
		var person={
			name:'lisi',
			age:3,
			tags:['js','java','web']
		}
		取对象的值：
			person.name
			person.tags[2]
			
三、严格类型检查：
	作用：预防随意性产生的问题。
	开启：
		IDEA settings Languages&Frameworks JavaScript ECMAScript6
	使用：
		<script>
			//严格检查模式
			'use strict';
			//全局变量
			var i=1;
			//ES6 中局部变量使用let定义
			let j=1;
		</script>
		
四、数据类型
	4.1	字符串
		4.1.1 单引号或多引号
		4.1.2 转义字符：
			\'
			\n
			\t
			\u4e2d	\u####  Unicode字符
			\x41	Ascll字符
		4.1.3 多行字符串
			var msg=`
				hello
				world
			`;
		4.1.4 字符串长度
			str.length
		4.1.5 不可变性
			无法通过下标改变字符串数组一个字符来对字符串修改。
			但可以对字符串整体重新赋值。
		4.1.6 大小写转换
			//转大写
			str.toUpperCase();
			//转小写
			str.toLowerCase();
		4.1.7 字符位置
			str.indexOf("t");
		4.1.8 截取子串（前闭后开）
			str.substring(x,y);
	4.2 数组
		可以同时存放多个类型，通过下标取值、赋值。
		4.2.1 数组长度
			arr.length;可以对数组长度赋值改变容量，比原值小将丢失数据。
		4.2.2 获取元素下标索引
			arr.indexOf(2);
		4.2.3 截取子串（前闭后开）	
			arr.slice()
		4.2.4 元素压入与弹出
			尾部：
				push()：压入
				pop()：弹出
			首部：
				unshift()：压入
				shift()：弹出
		4.2.5 排序
			arr.sort()
		4.2.6 反转
			arr.reverse()
		4.2.7 拼接（返回新的数组）
			arr.concat(1,2,3)
		4.2.8 join
			打印连接符连接的数组（字符串）
			arr.join(-);使用-连接，输出a-b-c
		4.2.9 多维数组
		4.2.10 数组的定义
			1.变量
				var arr = []; 
				var arr = [3,1,5,8];
			2.Array对象
			var arr = new Array(); //var arr = [];
			var arr1 = new Array(5); //数组定义并长度是5.
			var arr2 = new Array(5,6,7); //定义一个数组，元素是5,6,7 
			alert(typeof(arr));//对象类型是Object
	4.3 对象
		若干个键值对，键为字符串，值为任意对象，每个键值对使用分号隔开。
		var 对象名 = {
			属性名 : 属性值,
				.... ,
			属性名 : 属性值
		};
		4.3.1 对象赋值与打印
			person.name='wangwu';
			person
		4.3.2 对象属性不存在
			undefined
		4.3.3 动态删减属性
			delete person.name
		4.3.4 动态删减属性（同时赋值）
			person.haha='hahah'
		4.3.5 判断属性是否属于对象
			in运算符：
				'toString' in person（true）
				缺点：无法确认是否属于对象本身或原型链
			hasOwnProperty：
				判断属性是否是对象自身拥有
				person.hasOwnProperty('age');
	4.4 流程控制
		4.4.1 if条件判断：
			if(){}else if(){}else{}
		4.4.2 while：
			while(){}
			do{}while()
		4.4.3 for循环：
			for (let i=0;i<age.length;i++){console.log(age[i]);}
			for (let number of age) {console.log(number);}
		4.4.4 for in（可以遍历对象或数组）：
			let arr = [5,6,7，8]
			let obj={a:1,b:2,c:3,d:4}
			//遍历数组
			for(let i in arr){
				consloe.log(i)//打印arr元素下标
				consloe.log(arr[i])//打印arr元素
			}
			//遍历对象
			for(let key in obj){
				consloe.log(key)//打印对象obj的key
				consloe.log(obj[key])//打印key对应的值 
			}
		4.4.5 for each（无法使用continue、break、return）：
			arr.forEach(function(v, i) {
				console.log(v) //打印arr元素
				console.log(i) //打印arr元素下标
			})
		4.4.6 for of（迭代器）：
			for(let item of arr){
				consloe.log(item )//打印arr元素
			}
	4.5 Map和Set(SE6)
		Map:
			let map=new Map([['tom',100],['jack',90],['haha',88]]);
			let name = map.get('tom');//通过key获得value
			map.set('admin',60);	//新增或修改
			map.delete('tom');		//删除
			console.log(map);
		Set:无序不重复的集合
			let set=new Set([3,1,1,1,1]);//set可去重
			set.add(2);			//添加
			set.delete(3);		//删除
			console.log(set.has(1));//判断是否包含
			console.log(set);
	4.6 iterator(ES6)
		遍历数组
		```JavaScript
		let arr=[9,6,7,2];
		for (let number of arr) {
			console.log(number);
		}
		```
		遍历Map
		```JavaScript
		let map=new Map([['tom',100],['jack',90],['haha',88]]);
		for (let mapElement of map) {
			console.log(mapElement);
		}
		```
		遍历Set
		```javascript
		let set=new Set([3,1,1,2,6]);//set可以去重
		for (let number of set) {
			console.log(number);
		}
		```
五、函数与方法
	5.1 函数定义
		注：return即函数结束，如果无return，则执行完返回undefine
		方式一：
			function abs(x){
				if(x>=0){
					return x;
				}else{
					return -x;
				}
			}
		方式二：
			var abs=function(x){
				if(x>=0){
					return x;
				}else{
					return -x;
				}
			}
	5.2 函数调用
		abs(10)	//10
		abs(-10)	//10
		var sum = getSum; //函数为对象，sum、getSum均为函数的引用。
		注：函数传入参数与目标类型不匹配时的处理。 
			var abs=function(x){
				//手动抛出异常
				if(typeof x!=='number'){
					throw 'Not a number';
				}
				...
			}
		关键字：arguments
			以数组形式传入参数，通过下标获取各参数。
		如何获取已定义参数外的多余参数？
			function a(a,b,...rest){
				console.log("a===>",a);
				console.log("b===>",b);
				console.log(rest);
			}
	5.3 变量作用域
		5.3.1 全局对象window
			默认绑定了所有全局变量，包含alert()。
			不同js如何避免冲突？
				//唯一全局变量，用来装自己定义的全局变量
				 var Mapp={};
				//定义全局变量
				Mapp.name='lisi';
				Mapp.add=function(a,b){return a+b;}
			定义局部变量：使用let
	5.4 常量const
		使用全大写定义的变量为只读变量。
		
	5.5 方法（类？）
		对象中加入函数。
		call与apply（更改箭头指向，方法借用）：
			obj2.fn.call(obj1,传入的参数);//this指向obj1，obj2借用obj1的fn函数。
			obj3.fn.call(obj1,集合对象);//this指向obj1
		箭头函数（无this，继承上层环境）：
			不使用箭头函数：
				let obj={
					a:222,
					fn:function(){    
						setTimeout(function(){console.log(this.a)})
					}
				};
				obj.fn();//undefined
				//传给 setTimeout 的是普通函数，this 指向 window。 
			使用箭头函数：
				let obj={
					a:222,
					fn:function(){    
						setTimeout(()=>{console.log(this.a)});
					}
				};
				obj.fn();//222

六、内部对象
	标准对象：
		>> typeof 123
		<- "number"
		>> typeof '123'
		<- "string"
		>> typeof true
		<- "boolean"
		>> typeof NaN
		<- "number"
		>> typeof []
		<- "object"
		>> typeof {}
		<- "object"
		>> typeof Math.abs
		<- "function"
		>> typeof undefined
		<- "undefined"
	6.1 Date
		6.1.1 常用方法
			let date = new Date();//Date Tue Jun 09 2020 10:49:38 GMT+0800 (中国标准时间)
			console.log(date);
			date.getFullYear();//年
			date.getMonth();//月 0-11 代表月
			date.getDate();//日
			date.getDay();//星期
			date.getHours();//时
			date.getMinutes();//分
			date.getSeconds();//秒
			date.getMilliseconds();//毫秒
			date.getTime();//时间戳 全世界统一  1970.1.1 00:00:00 毫秒数
			console.log(new Date(1591671532754));//时间戳转时间
		6.1.2 转换
			>> var now=new Date(1591671532754);
			>> console.log(now);
			<- Date Tue Jun 09 2020 10:58:52 GMT+0800 (中国标准时间)
			>> now.toLocaleString()//注意调用是一个方法，不是属性
			<- "2020/6/9 上午10:58:52"
			>> now.toGMTString()
			<- "Tue, 09 Jun 2020 02:58:52 GMT"
	6.2 Math
		静态方法，类名访问。
		var num1 = Math.ceil(12.34);//返回大于等于指定参数的最小整数。
		var num2 = Math.floor(12.34);//返回小于等于指定数据的最大整数。
		var num3 = Math.round(12.54);//四舍五入
		var num4 = Math.pow(10,2);  //平方
	6.3 json
		轻量级的数据交互格式。
			对象使用 {}
			数组使用 []
			键值对使用 key:value
		Json字符串与JavaScript对象转换：
			var user={
				name:'lisi',
				age:3,
				sex:'男'
			};
			//对象转换为JSON
			let jsonUser = JSON.stringify(user);//{"name":"lisi","age":3,"sex":"男"}
			//JSON字符串转换为对象,参数为JSON字符串
			let object = JSON.parse(jsonUser);//Object { name: "lisi", age: 3, sex: "男" }
		Json与JavaScript的对比：
			var object={a:'hello',b:'hellob'};
			var json='{"a":"hello","b":"hellob"}';
	6.4 Ajax
			Ajax即“Asynchronous Javascript And XML”(异步JavaScript 和XML)。
			是一种创建交互式网页应用的网页开发技术。
			Ajax=异步JavaScript和XML（标准通用标记语言的子集）。
			通过在后台与服务器进行少量数据交换,Ajax可以使用网页实现异步更新（不刷新网页对部分内容进行更新）。
七、面向对象
	7.1 类的定义
		公有属性：this. var
		function Shape(ax,ay)
		{
			var x = 0 ;
			var y = 0 ;
			this .gx = 0 ;
			this .gy = 0 ;
			var init = function ()
			{
				x = ax; //访问私有属性，直接写变量名即可 
				y = ay;
				this .gx = ax; //访问公有属性，需要在变量名前加上this. 
				this .gy = ay;
			};
			init();
		}
	7.2 类的定义	
		class Shape{
			constructor(ax,ay) {
				this .gx = ax; 
				this .gy = ay;
			}
			hello(){
				alert('hello');
			}
			hello(){
				alert('hello');
			}
		}
	7.3 继承
		class Teemo{
			constructor(name) {
				this.name=name;
			}
			hello(){
				alert('Hello Teemo');
			}
		}

		class smallTeemo extends Teemo{
			constructor(name,grade) {
				super(name);
				this.grade=grade;
			}
			myGrade(){
				alert('Teemo Grade');
			}
		}
八、window对象
	8.1 window
		浏览器窗口
		>> window.innerHeight
		<- 244
		>> window.innerWidth
		<- 1536
		>> window.outerHeight
		<- 848
		>> window.outerWidth
		<- 1550
	8.2 Navigator
		封装了浏览器的信息
		>> navigator.appName
		<- "Netscape"
		>> navigator.appVersion
		<- "5.0 (Windows)"
		>> navigator.userAgent
		<- "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0"
		>> navigator.platform
		<- "Win32
	8.3 screen
		屏幕尺寸 像素px
		>> screen.width
		<- 1536
		>> screen.height
		<- 864
	8.4 location
		当前页面的url信息。
		host: "www.baidu.com"				//主机
		href: "https://www.baidu.com/"		//地址
		protocol: "https:"					//协议
		reload: function reload()			//重新加载
		//设置新的地址
		>> location.assign("https://www.csdn.net/")
	8.5 Document
		当前页面 HTML DOM文档树
		>> document.title
		<- "百度一下，你就知道"
		>> document.title="hahah"
		<- "hahah"
		获取具体的文档树节点：
		
		获取cookie：
		>> document.cookie
		服务器端可以设置cookie：httpOnly，防止 cookie 泄露
	8.6 History
		history.forward();//前进
		history.back();//后退
	8.7 window常用方法
		<script type="text/javascript">
			var timeid；//全局变量，如果写在某个方法的话别的方法就不能使用
			function windowMethodDemo(){
				var b = confirm("你真的确定要点击吗？");  //这里的方法都省略了window.
				alert("b="+b);  //上面confirm方法会弹出一个窗口，点击按钮会返回值

				setTimeout("alert('time out run')",4000); //设置多少毫秒弹出
				timeid = setInterval("alert('interval run')",3000); //返回的Integer对象clearInterval方法用，该方法的作用是每多少毫秒就弹出
			}

		function stopTime(){
			clearInterval(timeid); //取消setInterval方法的调用
		}

		function windowMove(){
			//	moveBy(10,10);  窗口移动多少像素
			//	moveTo(40,40);  窗口移动到哪个坐标
			for (var x = 0; x < 700; x++){  //该代码段就是抖动窗口的功能
				moveBy(20, 0);
				moveBy(0, 20);
				moveBy(-20,0);
				moveBy(0,-20);
			} 
		}

		function windowOpen(){				 open("ad.html","_blank","height=400,width=400,status（状态栏）=no,toolbar（工具栏）=no,menubar（菜单栏）=no,location（地址栏）=no");
		//第一个参数是打开的链接，第二个参数窗口target属性，第三个参数设置窗口的其他属性
		  //		  close(); 弹出窗口后关闭该窗口
		}
		</script>

		<input type="button" value="演示window对象的方法" onclick="windowOpen()"/>
		<input type="button" value="停止" onclick="stopTime()"/>
	8.8 window对象
		<script type="text/javascript">
			 /*
			 onunload = function(){  //窗口关闭后弹出
				alert("onunload run");
			} 

			onload = function(){  //窗口加载后弹出
				alert("onload run");
			}

			onbeforeunload = function(){  //窗口关闭时弹出
				alert("onbeforeunload run");
			}  已过时？
			*/
			onload = function(){
			window.status = "啊！，加载完毕啦";  //设置窗口加载后状态栏的信息
		}
		</script>
九、BOM
	9.1 定义与相关概念
		Browser Object Model（浏览器对象模型）：将标记型文档封装成对象。
		浏览器网页就是一个Dom树形结构
			更新：更新Dom节点
			遍历：得到Dom节点
			删除：删除Dom节点
			添加：添加一个新的Dom节点
		DOM模型有三种：
			DOM level 1：将html文档封装成对象。
			DOM level 2：在leve 1基础上加入了新功能，比如解析名称空间。
			DOM level 3：将xml文档封装成了对象。
		DHTML:动态的HTML，多项技术的综合，其中包含了HTML,CSS,DOM,JavaScript。
		HTML:负责提供标签，对数据进行封装。		
		CSS:负责提供样式属性，对数据进行样式定义。
		DOM:负责将标签型文档及文档中的所有内容进行解析，并封装成对象。
		JS:负责提供程序设计语言，对页面中的对象进行逻辑操作（负责页面的行为定义）。
		DHTML+XMLhttpRequest = AJAX
	9.2 获取BOM节点
		1，getElementById():通过标签的id属性值获取该标签节点。
		2，getElementsByName(): 通过标签的name属性获取节点（返回数组）。
		3，getElementsByTagName(): 通过标签名获取节点（返回数组）。
		4，document.getElementsByClassName()：通过类名获取节点。
		let father = document.getElementById('father');
		let children = father.children;//获取父节点下的所有子节点
		let child=father.children[index];//获取第index个子节点
		let firstChild = father.firstChild;//第一个子节点
		let lastChild = father.lastChild;//最后一个子节点
	9.3 更新BOM
		操作文本
			id1.innerText='456';修改文本的值
			id1.innerHTML='123';可以解析HTML文本标签
		操作css
			>> id1.style.color='red'		//属性使用字符串
			<- "red"
			>> id1.style.fontSize='100px'	//下划线转驼峰命名问题
			<- "100px"
			>> id1.style.padding='2em'
			<- "2em"
	9.4 删除BOM
		删除步骤：先获取当前节点的父节点，再通过父节点删除自己。
		let self = document.getElementById('p1');
		let father = self.parentElement;
		father.removeChild(self);
		//删除是一个动态的过程（删除多个Children时，Children随时变化）
		father.removeChildren(father.children[0]);
	9.5 插入BOM
		9.5.1 追加已有标签
			let js = document.getElementById('js');
			let list = document.getElementById('list');
			list.append(js);//追加到后面
		9.5.2 创建新的标签追加
		9.5.3 插入到目标节点前
			let js = document.getElementById('js');//新的节点
			let list = document.getElementById('list');//包含的父节点
			let ee = document.getElementById('ee');//目标节点
			list.insertBefore(js,ee);
十、表单
	提交信息。
		- 文本框	text
		- 下拉框 < select >
		- 单选框 radio
		- 多选框 checkbox
		- 隐藏域 hidden
		- 密码框 password
	10.1 获取提交信息
		let username = document.getElementById('username');
		let boy = document.getElementById('boy');
		let girl = document.getElementById('girl');
		//得到输入框的值
		username.value;
		//修改输入框的值
		username.value = '123';
		//对于单选框，多选框等固定的值，用.value只能获取当前值。
		boy.value;
		boy.checked;//查看返回的结果是否为true，如果为true，则为选中
		boy.checked=true;//赋值
	10.2 提交表单
		<form action="https://www.baidu.com/" method="post" onsubmit="return check()">
			<p>
				<span>用户名</span>
				<input type="text" id="username" name="username">
			</p>
			<p>
			   <span>密&nbsp;&nbsp;&nbsp;&nbsp;码</span>
			   <input type="password" id="input-password">
			   <!--隐藏域作用:保持密码长度不变-->
			   <input type="hidden" id="md5-password" name="password">
			</p>
			<button type="submit">提交</button>
		</form>
		<script>
			function check() {
				let username = document.getElementById('username');
				let input_password = document.getElementById('input-password');
				let md5_password = document.getElementById('md5-password');
				//MD5算法
				md5_password.value=md5(input_password.value);
				//可以检验表单内容，true通过，false阻止
				return true;
			}
		</script>
十一、jQuery
	中文在线文档：https://www.jquery123.com/
	（官网：https://jquery.com/）
	（文档：https://jquery.cuishifeng.cn/index.html）
	（在线cdn：https://www.bootcdn.cn/jquery/）
	使用：
		公式：$(选择器).事件函数()
		<script src="lib/jquery-3.5.1.js"></script>
		<script>
			//选择器就是css选择器
			$('#test-jquery').click(function () {
				alert('hello jquery');
			})
		</script>
	11.1 选择器
		文档工具站：https://jquery.cuishifeng.cn/index.html
		$('p').click();//标签选择器
		$('#id1').click();//id选择器
		$('.class1').click();//类选择器
	11.2 事件
		鼠标事件、键盘事件、其他事件。
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>Title</title>
			<script src="lib/jquery-3.5.1.js"></script>
			<style>
				#divMove{
					width: 500px;
					height: 500px;
					border: red solid 1px;
				}
			</style>
		</head>
		<body>

			<!--获取鼠标当前的坐标-->
			mouse：<span id="mouseMove"></span>
			<div id="divMove">
				在这里移动鼠标试试
			</div>

			<script>
				//当网页元素加载完毕之后响应事件
				$(function () {
					$('#divMove').mousemove(function (e) {
						$('#mouseMove').text('x:'+e.pageX+"  y:"+e.pageY);
					})
				})
			</script>
		</body>
		</html>
	11.3 操作DOM
		> 文本节点操作
		```html
		<ul id="test-ul">
			<li class="js">javascript</li>
			<li name="python">python</li>
		</ul>

		<script>
			$('#test-ul li[name=python]').text();//获得值
			$('#test-ul li[name=python]').text("123");//设置值
			$('#test-ul').html();//获得值
			$('#test-ul').html("<strong>123</strong>");//设置值
		</script>
		```

		> css操作
		```JavaScript
		$('#test-ul li[name=python]').css({'color':'red','fontSize':'30px'});
		```

		> 元素的显示和隐藏
		本质：`display:none`
		```JavaScript
		$('#test-ul li[name=python]').hide();//隐藏
		$('#test-ul li[name=python]').show();//显示
		$('#test-ul li[name=python]').toggle();//隐藏显示轮换，调用一次换一次
		```

		> 娱乐测试
		```JavaScript
		$(window).width();//浏览器窗口
		$(window).height();
		```