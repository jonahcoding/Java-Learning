/*
========================================
----------------------------------------

重载与重写：
    重载：
        编译期。
        同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。
        方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。
    重写：
        在运行期，子类对父类的允许访问的方法的实现过程进行重新编写（只改变内部逻辑）。
        返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类（降低限制）。
        如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。
		构造方法无法被重写。
		

面向过程与面向对象：
    面向过程：高性能。
    面向对象：易维护、易复用、易扩展。

构造器 Constructor 是否可被 override?
    Constructor 不能被 override（重写）,但可重载。

无参构造方法的意义？
    Java 程序在执行子类的构造方法前，如未使用 super()来调用父类特定的构造方法，则会调用父类中无参构造方法。
    如父类中没有无参构造方法，将发生编译错误。

成员变量与局部变量的区别？
    语法形式：
        成员变量：属于类，可被控制访问修饰符和final修饰。
        局部变量：代码块或方法中定义的变量、参数，仅能被final修饰。
    内存存储：
        成员变量：静态成员变量属于类，非静态成员变量属于对象（实例），对象在堆内存。
        局部变量：栈内存。
    生命周期：
        成员变量：对象。
        局部变量：方法体。
    初始赋值：
        成员变量：未赋初值成员变量具有默认值（final修饰须显式初始化）。
        局部变量：无默认初值。

如何创建对象？对象引用于对象实体的区别？
    1.使用关键字 new 创建对象实例（堆内存）。
    2.对象引用（栈内存）指向对象实体，对象引用可以不指向对象或指向一个对象，一个对象可以有多个引用。

构造方法的作用？不声明构造方法，是否可以正确运行？
    构造方法用于初始化对象实例，不声明时拥有默认的构造方法。
    当自行添加有参构造方法后，该类不再默认添加无参构造，不显示定义无参构造将不能无参创建对象。

构造方法特点：
    1.方法名与类名相同。
    2.无返回值（非void）。
    3.对象创建时默认调用。

在调用子类构造方法之前优先调用父类无参构造方法,其目的是?
    帮助子类做初始化工作。

对象的相等与指向他们的引用相等,两者有什么不同?
    对象的相等，比的内存中存放的内容是否相等。
    引用的相等，比较他们指向的内存地址是否相等。


	
封装：
    对外隐藏属性，仅提供可被外界访问的方法操作属性。

继承：
    子类拥有父类对象所有的属性和方法（包括私有属性和私有方法）；对继承于父类中的私有属性和方法，子类是无法访问。
    子类可以定义自己属性和方法，即子类可以对父类进行扩展。
    子类可以重写父类的方法。

多态：
    一个对象具有多种的状态。具体表现为父类的引用指向子类的实例。
    特点：
        对象类型和引用类型之间具有继承（类）/实现（接口）的关系；
        对象类型不可变，引用类型可变；
        方法具有多态性，属性不具有多态性；
        引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；
        多态不能调用“只在子类存在但在父类不存在”的方法；
		如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。
		

		




----------------------------------------
========================================
*/

class Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Student s1 = new Student("小张");
		Student s2 = new Student("小李");
		Test.swap(s1, s2);
		System.out.println("s1:" + s1.getName());
		System.out.println("s2:" + s2.getName());
	}

	public static void swap(Student x, Student y) {
		Student temp = x;
		x = y;
		y = temp;
		System.out.println("x:" + x.getName());
		System.out.println("y:" + y.getName());
	}
}

/*
    x:小李
    y:小张
    s1:小张
    s2:小李
*/