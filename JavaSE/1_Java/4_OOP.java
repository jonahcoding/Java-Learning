/*
========================================
----------------------------------------
【Java面向对象】
----------------------------------------
一、构造方法
    构造器 Constructor 是否可被 override?
        Constructor 不能被 override（重写）,但可重载。

    无参构造方法的意义？
        Java 程序在执行子类的构造方法前，如未使用 super()来调用父类特定的构造方法，则会调用父类中无参构造方法。
        如父类中没有无参构造方法，将发生编译错误。

    如何创建对象？对象引用于对象实体的区别？
        1.使用关键字 new 创建对象实例（堆内存）。
        2.对象引用（栈内存）指向对象实体，对象引用可以不指向对象或指向一个对象，一个对象可以有多个引用。

    构造方法的作用？不声明构造方法，是否可以正确运行？
        构造方法用于初始化对象实例，不声明时拥有默认的构造方法。
        当自行添加有参构造方法后，该类不再默认添加无参构造，不显示定义无参构造将不能无参创建对象。

    构造方法特点：
        1.方法名与类名相同。
        2.无返回值（非void）。
        3.对象创建时默认调用。

    在调用子类构造方法之前优先调用父类无参构造方法,其目的是?
        帮助子类做初始化工作。

    对象的相等与指向他们的引用相等,两者有什么不同?
        对象的相等，比的内存中存放的内容是否相等。
        引用的相等，比较他们指向的内存地址是否相等。
----------------------------------------	
二、封装：
    对外隐藏属性，仅提供可被外界访问的方法以操作属性。

三、抽象：
    含有抽象方法的类，无法实例化，子类必须重写所有抽象方法，否则子类也为抽象类。


四、继承：
    子类拥有父类对象所有的属性和方法（包括私有属性和私有方法）；对继承于父类中的私有属性和方法，子类是无法访问。
    子类可以定义自己属性和方法，即子类可以对父类进行扩展。
    子类可以重写父类的方法。

五、接口：
    接口（abstract隐式抽象）只声明了方法，无法被实例化。
    接口可以继承自多个接口。
    一个类可以实现（implemnets）多个接口，弥补Java无法多继承的缺陷。
    实现接口的类必须实现接口中声明的所有方法，否则该类为抽象类。
    标记接口：没有属性和方法的接口。

六、多态：
    多态的条件：
        继承
        重写
        父类引用指向子类对象
    特点：
        对象类型和引用类型之间具有继承（类）/实现（接口）的关系；
        对象类型不可变，引用类型可变；
        方法具有多态性，属性不具有多态性；
        引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；
        多态不能调用“只在子类存在但在父类不存在”的方法；
		如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。

七、枚举类

----------------------------------------
========================================
*/

class Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Student s1 = new Student("小张");
		Student s2 = new Student("小李");
		Test.swap(s1, s2);
		System.out.println("s1:" + s1.getName());
		System.out.println("s2:" + s2.getName());
	}

	public static void swap(Student x, Student y) {
		Student temp = x;
		x = y;
		y = temp;
		System.out.println("x:" + x.getName());
		System.out.println("y:" + y.getName());
	}
}

/*
    x:小李
    y:小张
    s1:小张
    s2:小李
*/