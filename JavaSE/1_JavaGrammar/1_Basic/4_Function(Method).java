/*
========================================
----------------------------------------

方法返回值：
    接受方法体执行结果（该方法可产生结果）。

为什么Java中只有值传递？
    方法无法修改基本数据类型的参数。
    而对象引用的拷贝与对象引用指向同一个对象。
    实质：对象引用按值传递。

方法与参数：
    1.方法无法改变基本数据类型的参数。
    2.可以改变对象参数的状态。
    3.方法无法用引用对象引用一个新的对象。

重载与重写：
    重载：
        编译期。
        同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。
        方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。
    重写：
        在运行期，子类对父类的允许访问的方法的实现过程进行重新编写（只改变内部逻辑）。
        返回值类型、方法名、参数列表必须相同，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类（降低限制）。
        如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。
        构造方法无法被重写。

深拷贝与浅拷贝：
    深拷贝：对基本数据类型进行值传递，对引用类型创建新的对象并复制其值。
    浅拷贝：对基本数据类型进行值传递，对引用类型进行引用传递般的拷贝。

----------------------------------------
========================================
*/

class Test {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Student s1 = new Student("小张");
		Student s2 = new Student("小李");
		Test.swap(s1, s2);
		System.out.println("s1:" + s1.getName());
		System.out.println("s2:" + s2.getName());
	}

	public static void swap(Student x, Student y) {
		Student temp = x;
		x = y;
		y = temp;
		System.out.println("x:" + x.getName());
		System.out.println("y:" + y.getName());
	}
}

/*
    x:小李
    y:小张
    s1:小张
    s2:小李
*/